/**
 * @fileoverview Firestore Security Rules for Starwatch Sentinel.
 *
 * Core Philosophy:
 * This ruleset enforces a strict user-ownership model for user profiles.
 * Satellites and their telemetry/anomaly data are publicly readable, but only authorized users can create, update, or delete them.
 * Alerts are user-specific and reports are globally available, secured via user ID checks.
 *
 * Data Structure:
 * - /users/{userId}: User profiles, secured by path-based ownership.
 * - /satellites/{satelliteId}: Satellite data.
 * - /satellites/{satelliteId}/telemetry/{telemetryId}: Telemetry data for each satellite.
 * - /satellites/{satelliteId}/anomalies/{anomalyId}: Anomaly data for each satellite.
 * - /alerts/{alertId}: Alerts, secured to the specific user.
 * - /reports/{reportId}: Reports generated by users.
 *
 * Key Security Decisions:
 * - Users can only read and write their own profile data.
 * - Listing users is disallowed for privacy.
 * - Satellite data is publicly readable, but writes are restricted.
 * - Alerts are user-specific and reports are globally available.
 *
 * Denormalization for Authorization:
 * - TelemetryData and Anomaly documents contain a denormalized 'satelliteId' field, allowing for security rules that validate the relationship to the parent satellite without additional reads.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Enforces strict user-ownership for user profiles.
     * @path /users/{userId}
     * @allow (create) User with ID 'user123' creates their own profile.
     * @allow (get) User with ID 'user123' reads their own profile.
     * @deny (create) User with ID 'user123' attempts to create a profile for 'user456'.
     * @deny (update) User with ID 'user123' attempts to update the profile of 'user456'.
     * @deny (delete) User with ID 'user123' attempts to delete the profile of 'user456'.
     * @principle Enforces document ownership for all operations, and validates ID consistency on create and immutability on update.
     */
    match /users/{userId} {
      allow get: if isOwner(userId);
      allow list: if false; // Listing users is not allowed for privacy.
      allow create: if isOwner(userId) && request.resource.data.id == userId;
      allow update: if isExistingOwner(userId) && resource.data.id == userId;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Allows public read access to satellite data, but restricts writes.
     * @path /satellites/{satelliteId}
     * @allow (get) Any user can read satellite data.
     * @allow (list) Any user can list satellites.
     * @deny (create) Any user attempts to create a satellite without proper authorization. // TODO: Replace with role-based access later.
     * @deny (update) Any user attempts to update a satellite without proper authorization. // TODO: Replace with role-based access later.
     * @deny (delete) Any user attempts to delete a satellite without proper authorization. // TODO: Replace with role-based access later.
     * @principle Allows public read access but restricts write access to authorized users only.
     */
    match /satellites/{satelliteId} {
      allow get, list: if true;
      allow create, update, delete: if false; // TODO: Add role-based access later
    }

    /**
     * @description Allows public read access to telemetry data, but restricts writes.
     * @path /satellites/{satelliteId}/telemetry/{telemetryId}
     * @allow (get) Any user can read telemetry data.
     * @allow (list) Any user can list telemetry data.
     * @deny (create) Any user attempts to create telemetry data without proper authorization. // TODO: Replace with role-based access later.
     * @deny (update) Any user attempts to update telemetry data without proper authorization. // TODO: Replace with role-based access later.
     * @deny (delete) Any user attempts to delete telemetry data without proper authorization. // TODO: Replace with role-based access later.
     * @principle Allows public read access but restricts write access to authorized users only.
     */
    match /satellites/{satelliteId}/telemetry/{telemetryId} {
      allow get, list: if true;
      allow create, update, delete: if false; // TODO: Add role-based access later
    }

    /**
     * @description Allows public read access to anomaly data, but restricts writes.
     * @path /satellites/{satelliteId}/anomalies/{anomalyId}
     * @allow (get) Any user can read anomaly data.
     * @allow (list) Any user can list anomaly data.
     * @deny (create) Any user attempts to create anomaly data without proper authorization. // TODO: Replace with role-based access later.
     * @deny (update) Any user attempts to update anomaly data without proper authorization. // TODO: Replace with role-based access later.
     * @deny (delete) Any user attempts to delete anomaly data without proper authorization. // TODO: Replace with role-based access later.
     * @principle Allows public read access but restricts write access to authorized users only.
     */
    match /satellites/{satelliteId}/anomalies/{anomalyId} {
      allow get, list: if true;
      allow create, update, delete: if false; // TODO: Add role-based access later
    }

    /**
     * @description Allows a user to read and write their own alerts.
     * @path /alerts/{alertId}
     * @allow (create) User with ID 'user123' creates an alert for themselves.
     * @allow (get) User with ID 'user123' reads an alert assigned to them.
     * @deny (create) User with ID 'user123' attempts to create an alert for 'user456'.
     * @deny (update) User with ID 'user123' attempts to update an alert not assigned to them.
     * @deny (delete) User with ID 'user123' attempts to delete an alert not assigned to them.
     * @principle Enforces that alerts are only accessible and modifiable by the assigned user.
     */
    match /alerts/{alertId} {
      allow get: if request.auth != null && request.auth.uid == resource.data.userId;
      allow list: if request.auth != null && request.auth.uid == resource.data.userId;
      allow create: if request.auth != null && request.resource.data.userId == request.auth.uid;
      allow update: if request.auth != null && request.auth.uid == resource.data.userId && resource != null;
      allow delete: if request.auth != null && request.auth.uid == resource.data.userId && resource != null;
    }

    /**
     * @description Restricts write access to reports, but grants read access to all authenticated users.
     * @path /reports/{reportId}
     * @allow (get) Any authenticated user can read a report.
     * @allow (list) Any authenticated user can list reports.
     * @deny (create) Any user attempts to create a report without proper authorization. // TODO: Replace with role-based access later.
     * @deny (update) Any user attempts to update a report without proper authorization. // TODO: Replace with role-based access later.
     * @deny (delete) Any user attempts to delete a report without proper authorization. // TODO: Replace with role-based access later.
     * @principle Grants read access to all authenticated users but restricts write access.
     */
    match /reports/{reportId} {
      allow get, list: if isSignedIn();
      allow create, update, delete: if false; // TODO: Add role-based access later
    }
  }

  // Helper functions
  function isSignedIn() {
    return request.auth != null;
  }

  function isOwner(userId) {
    return request.auth != null && request.auth.uid == userId;
  }

  function isExistingOwner(userId) {
      return isOwner(userId) && resource != null;
  }
}